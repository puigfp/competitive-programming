from solve import (
    reduce_maze,
    get_accessible_keys,
    compute_distances,
    solve_part1,
    solve_part2,
)


def test_reduce_maze():
    tests = [
        (
            """########################
#...............b.C.D.f#
#.######################
#.....@.a.B.c.d.A.e.F.g#
########################""",
            {
                "@": {"a", "b"},
                "a": {"B", "@"},
                "B": {"a", "c"},
                "c": {"d", "B"},
                "d": {"A", "c"},
                "A": {"d", "e"},
                "e": {"A", "F"},
                "F": {"g", "e"},
                "g": {"F"},
                "b": {"C", "@"},
                "C": {"D", "b"},
                "D": {"f", "C"},
                "f": {"D"},
            },
        ),
        (
            """#################
#i.G..c...e..H.p#
########.########
#j.A..b...f..D.o#
########@########
#k.E..a...g..B.n#
########.########
#l.F..d...h..C.m#
#################""",
            {
                "@": {"h", "g", "b", "c", "e", "d", "f", "a"},
                "a": {"E", "@"},
                "g": {"B", "@"},
                "b": {"A", "@"},
                "f": {"D", "@"},
                "d": {"F", "@"},
                "h": {"C", "@"},
                "c": {"G", "@"},
                "e": {"@", "H"},
                "E": {"k", "a"},
                "B": {"g", "n"},
                "A": {"b", "j"},
                "D": {"o", "f"},
                "F": {"d", "l"},
                "C": {"m", "h"},
                "k": {"E"},
                "n": {"B"},
                "G": {"i", "c"},
                "H": {"e", "p"},
                "j": {"A"},
                "o": {"D"},
                "l": {"F"},
                "m": {"C"},
                "i": {"G"},
                "p": {"H"},
            },
        ),
    ]

    for (maze, expected) in tests:
        assert expected == reduce_maze(maze.split("\n"))


def test_get_accessible_keys():
    tests = [
        (
            """########################
#...............b.C.D.f#
#.######################
#.....@.a.B.c.d.A.e.F.g#
########################""",
            {},
            "@",
            {"a", "b"},
        ),
        (
            """########################
#...............b.C.D.f#
#.######################
#.....@.a.B.c.d.A.e.F.g#
########################""",
            {"b"},
            "@",
            {"a", "b", "c", "d"},
        ),
        (
            """########################
#...............b.C.D.f#
#.######################
#.....@.a.B.c.d.A.e.F.g#
########################""",
            {"f"},
            "g",
            {"e", "g"},
        ),
    ]

    for (maze, keys, pos, expected) in tests:
        assert expected == get_accessible_keys(reduce_maze(maze.split("\n")), keys, pos)


def test_solve_part1():
    tests = [
        (
            """########################
#f.D.E.e.C.b.A.@.a.B.c.#
######################.#
#d.....................#
########################""",
            86,
        ),
        (
            """########################
#...............b.C.D.f#
#.######################
#.....@.a.B.c.d.A.e.F.g#
########################""",
            132,
        ),
        (
            """#################
#i.G..c...e..H.p#
########.########
#j.A..b...f..D.o#
########@########
#k.E..a...g..B.n#
########.########
#l.F..d...h..C.m#
#################""",
            136,
        ),
        (
            """########################
#@..............ac.GI.b#
###d#e#f################
###A#B#C################
###g#h#i################
########################""",
            81,
        ),
    ]

    for (maze, expected) in tests:
        assert expected == solve_part1(maze)


def test_solve_part2():
    tests = [
        (
            """#######
#a.#Cd#
##...##
##.@.##
##...##
#cB#Ab#
#######""",
            8,
        ),
        (
            """###############
#d.ABC.#.....a#
######...######
######.@.######
######...######
#b.....#.....c#
###############""",
            24,
        ),
        (
            """#############
#DcBa.#.GhKl#
#.###...#I###
#e#d#.@.#j#k#
###C#...###J#
#fEbA.#.FgHi#
#############""",
            32,
        ),
    ]

    for (maze, expected) in tests:
        assert expected == solve_part2(maze)
