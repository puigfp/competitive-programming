import math

from solve import parse_grid, seeable, solve_part1, solve_part2, angle

def test_angle():
    tests = [
        (0, 1),
        (1, 10),
        (1, 9),
        (1, 1),
        (1, 0),
        (1, -1),
        (0, -1),
        (-1, -1),
        (-1, 0),
        (-1, 1)
    ]
    for i in range(1, len(tests)):
        assert angle(tests[i-1][0], tests[i-1][1]) <= angle(tests[i][0], tests[i][1])

def test_solve_part1():
    tests = [
        (
            """.#..#
            .....
            #####
            ....#
            ...##""",
            8,
        ),
        (
            """......#.#.
            #..#.#....
            ..#######.
            .#.#.###..
            .#..#.....
            ..#....#.#
            #..#....#.
            .##.#..###
            ##...#..#.
            .#....####""",
            33,
        ),
        (
            """#.#...#.#.
            .###....#.
            .#....#...
            ##.#.#.#.#
            ....#.#.#.
            .##..###.#
            ..#...##..
            ..##....##
            ......#...
            .####.###.""",
            35,
        ),
        (
            """.#..#..###
            ####.###.#
            ....###.#.
            ..###.##.#
            ##.##.#.#.
            ....###..#
            ..#.#..#.#
            #..#.#.###
            .##...##.#
            .....#.#..""",
            41,
        ),
        (
            """.#..##.###...#######
            ##.############..##.
            .#.######.########.#
            .###.#######.####.#.
            #####.##.#.##.###.##
            ..#####..#.#########
            ####################
            #.####....###.#.#.##
            ##.#################
            #####.##.###..####..
            ..######..##.#######
            ####.##.####...##..#
            .#####..#.######.###
            ##...#.##########...
            #.##########.#######
            .####.#.###.###.#.##
            ....##.##.###..#####
            .#.#.###########.###
            #.#.#.#####.####.###
            ###.##.####.##.#..##""",
            210,
        )
    ]

    for (grid, solution) in tests:
        grid = parse_grid(grid)
        (x, y) = solve_part1(grid)
        assert seeable(grid, x, y) == solution

def test_solve_part2():
    grid = """.#..##.###...#######
    ##.############..##.
    .#.######.########.#
    .###.#######.####.#.
    #####.##.#.##.###.##
    ..#####..#.#########
    ####################
    #.####....###.#.#.##
    ##.#################
    #####.##.###..####..
    ..######..##.#######
    ####.##.####...##..#
    .#####..#.######.###
    ##...#.##########...
    #.##########.#######
    .####.#.###.###.#.##
    ....##.##.###..#####
    .#.#.###########.###
    #.#.#.#####.####.###
    ###.##.####.##.#..##"""
    grid = parse_grid(grid)
    (x, y) = solve_part1(grid)
    popped = solve_part2(grid, 13, 11)
    assert len(popped) == 299
    assert popped[0] == (12, 11)
    assert popped[1] == (1, 12)
    assert popped[2] == (2, 12)
    assert popped[9] == (8, 12)
    assert popped[19] == (0, 16)
    assert popped[49] == (9, 16)
    assert popped[99] == (16, 10)
    assert popped[198] == (6, 9)
    assert popped[199] == (2, 8)
    assert popped[200] == (9, 10)
    assert popped[298] == (1, 11)
